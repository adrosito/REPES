// ---------------------------------------
// src/liga.js
// ---------------------------------------

const API_BASE = 'https://open.faceit.com/data/v4';
const API_KEY  = import.meta.env.VITE_FACEIT_API_KEY || '';

if (!API_KEY) {
  alert('ERROR: define VITE_FACEIT_API_KEY en .env');
  throw new Error('Missing API key');
}

async function apiFetch(path) {
  const res = await fetch(API_BASE + path, {
    headers: { Authorization: `Bearer ${API_KEY}` }
  });
  if (!res.ok) {
    const txt = await res.text();
    throw new Error(`API error ${res.status}: ${txt}`);
  }
  return res.json();
}

// DOM refs
const leagueSelect   = document.getElementById('leagueSelect');
const seasonSelect   = document.getElementById('seasonSelect');
const loadRankingBtn = document.getElementById('loadRanking');
const rankingTbody   = document.querySelector('#rankingTable tbody');

// bloqueo inicial
leagueSelect.disabled = true;
seasonSelect.disabled = true;
loadRankingBtn.disabled = true;

// 1) Cargo ligas de CS:GO (puedes poner cs2 si lo admiten)
async function loadLeagues() {
  try {
    // ↓ aquí vuelvo al endpoint correcto
    const data = await apiFetch(`/games/csgo/leagues?limit=100`);
    leagueSelect.innerHTML = data.items.map(l =>
      `<option value="${l.league_id}">${l.name}</option>`
    ).join('');
    leagueSelect.disabled = false;
    await loadSeasons();
  } catch (err) {
    leagueSelect.innerHTML = `<option>Error cargando ligas</option>`;
    console.error(err);
  }
}

// 2) Cargo temporadas según la liga elegida
async function loadSeasons() {
  const lid = leagueSelect.value;
  seasonSelect.disabled = true;
  loadRankingBtn.disabled = true;
  seasonSelect.innerHTML = `<option>Cargando…</option>`;

  try {
    const data = await apiFetch(`/leagues/${lid}/seasons?limit=50`);
    seasonSelect.innerHTML = data.items.map(s =>
      `<option value="${s.season_id}">${s.name}</option>`
    ).join('');
    seasonSelect.disabled = false;
    loadRankingBtn.disabled = false;
  } catch (err) {
    seasonSelect.innerHTML = `<option>Error cargando temporadas</option>`;
    console.error(err);
  }
}

// 3) Cargo la clasificación (leaderboard) para liga+temporada
async function loadRanking() {
  const lid = leagueSelect.value;
  const sid = seasonSelect.value;
  loadRankingBtn.disabled = true;
  rankingTbody.innerHTML = `<tr><td colspan="8">Cargando…</td></tr>`;

  try {
    // primero obtengo el detalle de la temporada
    const detail = await apiFetch(`/leagues/${lid}/seasons/${sid}`);
    // extraigo un leaderboard_id válido
    let lbId = detail.leaderboards?.[0]?.leaderboard_id
            || detail.divisions?.[0]?.leaderboards?.[0]?.leaderboard_id;
    if (!lbId) throw new Error('No hay clasificación disponible');

    // luego pido la tabla
    const rankData = await apiFetch(`/leaderboards/${lbId}?limit=100`);
    rankingTbody.innerHTML = rankData.items.map(p => `
      <tr>
        <td>${p.position}</td>
        <td class="avatar-cell">
          <img src="${p.player.avatar}" alt="avatar">
        </td>
        <td>
          <a href="${p.player.faceit_url}" target="_blank">
            ${p.player.nickname}
          </a>
        </td>
        <td>
          ${p.player.country
             ? `<img src="https://flagcdn.com/24x18/${p.player.country.toLowerCase()}.png" alt="">`
             : ''
          }
        </td>
        <td>${p.played}</td>
        <td>${p.won}</td>
        <td>${p.lost}</td>
        <td>${p.points}</td>
      </tr>
    `).join('');
  } catch (err) {
    rankingTbody.innerHTML = `<tr><td colspan="8">Error: ${err.message}</td></tr>`;
    console.error(err);
  } finally {
    loadRankingBtn.disabled = false;
  }
}

// listeners
leagueSelect.addEventListener('change', loadSeasons);
loadRankingBtn.addEventListener('click', loadRanking);

// inicio
loadLeagues();
